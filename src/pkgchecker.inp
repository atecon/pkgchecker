function scalar is_minimum_gretl_version (void)
    if $version >= 20205
        return TRUE
    else
        Error("At minimum Gretl version 2020e required.")
        return FALSE
    endif
end function

function scalar read_and_add_xml_buffer (bundle *self)
    /* Read gdt file which has a xml structure. */

    catch self.xml_buffer = readfile(self.filename)
    if $error
        Error(sprintf("Failed to read file '%s'. Abort.\n", self.filename))
        return TRUE
    else
        return FALSE
    endif
end function

function string trim_extra_lines (const string buffer)
    if nelem(buffer) == 0
        return buffer
    endif
    strings content = strsplit(buffer, "\n")

    scalar n = nelem(content)
    if n == 1
        return content[n]
    endif

    return content
end function


function string get_path_content (const string path "xpath identifier",
                                  const string xml_buffer,
                                  scalar *n_got "Number of occurences of path")
    /* Extract content of some path in xml. */

    string path_content

    catch path_content = xmlget(xml_buffer, path, &n_got)
    if $error
        Warning(sprintf("Failed to find the path '%s'. Ignore.", path))
    endif

    return path_content
end function

function scalar get_number_of_functions (const bundle self)
    /* Get number of functions of package. */

    scalar n_functions = 0
    scalar valid = TRUE
    scalar counter = 1

    loop while valid == TRUE
        scalar n_got = 0
        string path = get_path_code(get_function_path(), counter)
        string foo = get_path_content(path, self.xml_buffer, &n_got)

        if n_got
            n_functions++
            counter++
        else
            break
        endif
    endloop

    return n_functions
end function

function string get_function_path (void)
    /* Configure path which should be parsed. */
    return "//gretl-functions/gretl-function-package"
end function


function string get_path_code (const string function_path,
                               const int item[1::] "i-th function code")
    /* Compile path for retrieving code' for i-th function definition. */
    return sprintf("%s/gretl-function[%d]/code", function_path, item)
end function

function string get_path_code_name (const string function_path,
                                    const int item[1::] "i-th function code")
    /* Compile path for retrieving function's name for the i-th function definition. */
    return sprintf("%s/gretl-function[%d]/@name", function_path, item)
end function


function string get_path_func_private_state (const string function_path,
                                             const int item[1::] "i-th function code")
    /* Compile path for retrieving privacy state for the i-th function definition. */
    return sprintf("%s/gretl-function[%d]/@private", function_path, item)
end function


function string get_code (const scalar item[1::] "i-th function code",
                          const bundle self)
    /* Retrieve name of the i-th function. */

    scalar n_got = 0
    string path = get_path_code(get_function_path(), item)

    return get_path_content(path, self.xml_buffer, &n_got)
end function


function string get_path_count_parameters (const string function_path,
                                           const int item[1::] "i-th function code")
    return sprintf("%s/gretl-function[%d]/params/@count",\
                    function_path, item)
end function

function scalar get_number_of_parameters (const int item[1::],
                                          const bundle self)
    /* Get number of parameters for a specific functions. */

    scalar n_parameters = 0
    string path = get_path_count_parameters(get_function_path(), item)

    return atof(get_path_content(path, self.xml_buffer, &n_parameters))
end function

function string get_path_parameter_name (const string function_path,
                                         const int item[1::] "i-th function code",
                                         const int iparam[1::] "n-th parameter")
    /* Retrieve name of input parameter. */
    return sprintf("%s/gretl-function[%d]/params/param[%d]/@name",\
                    function_path, item, iparam)
end function


function strings get_parameter_names (const scalar item[1::] "i-th function",
                                      const bundle self)
    /* Retrieve function name for the i-th function. */

    scalar n_parameters = get_number_of_parameters(item, self)
    if ok(n_parameters)
        strings names = array(n_parameters)
    else
        return array(0) # function has void input
    endif

    loop i=1..n_parameters
        scalar n_got = 0
        string path = get_path_parameter_name(get_function_path(), item, i)
        names[i] = strstrip(get_path_content(path, self.xml_buffer, &n_got))
    endloop

    return names
end function


function string get_function_name (const scalar item[1::] "i-th function code",
                                   const bundle self)
    /* Retrieve function name for the i-th function. */

    scalar n_got = 0
    string path = get_path_code_name(get_function_path(), item)
    string function_name = get_path_content(path, self.xml_buffer, &n_got)

    return trim_extra_lines(function_name)
end function


function scalar get_function_privacy (const scalar item[1::] "i-th function",
                                      const bundle self)
    /* Retrieve function's privacy status. */

    scalar n_got = 0
    string path = get_path_func_private_state(get_function_path(), item)
    string state = get_path_content(path, self.xml_buffer, &n_got)

    scalar priv = (nelem(state) > 0) ? TRUE : FALSE

    return priv
end function


function bundle extract_parameters (bundle Metadata,
                                    const bundle self)
    /* Extract input parameters for each function. */

    strings function_names = getkeys(Metadata)

    loop foreach i function_names
        Metadata["$i"].parameter_names = get_parameter_names(i, self)
    endloop

    return Metadata
end function


function bundle extract_code (const bundle self)
    /* Compile a key-value store.
    key: Function name
    value: String holding the i-th function code */

    bundle Codes
    scalar n_functions = get_number_of_functions(self)

    if n_functions == 0
        Warning("Package includes no functions.")
        return Codes
    endif

    loop i=1..n_functions
        string function_name = get_function_name($i, self)

        if nelem(function_name) == 0
            Warning("Function not found. Ignore.")
            flush
        else
            Codes["@function_name"] = _(code = get_code($i, self),\
                                        is_private = get_function_privacy($i, self))
        endif
    endloop

    assert(n_functions == nelem(Codes))

    return Codes
end function

function bundle get_pkgdata (const string filename "Path to gfn file")
    /* Main public function */

    bundle self = null
    string self.filename = filename

    if !is_minimum_gretl_version()
        return self
    endif

    err = read_and_add_xml_buffer(&self)
    if err
        return self
    endif

    bundle Metadata = extract_code(self)
    if nelem(Metadata) == 0
        return self
    endif

    bundle Metadata = extract_parameters(Metadata, self)

    return Metadata
end function


function bundle function_statistics (const bundle Metadata)
    /* Check which function is called by which. Identify unused private functions. */

    matrix graph = compile_dependency_graph(Metadata)
    matrix n_function_calls = summarize_graph(graph, getkeys(Metadata))
    strings dead_functions = get_names_dead_functions(n_function_calls, Metadata)

    return _(graph, n_function_calls, dead_functions)
end function


function strings get_names_dead_functions (const matrix n_function_calls,
                                           const bundle Metadata)
    /* Compile array holding names of private functions which are not called in the package. */

    strings function_names = rnameget(n_function_calls)
    strings uncalled = array(0)

    if sumc(n_function_calls .= 0) == 0
        return uncalled
    endif

    loop i=1..rows(n_function_calls)
        if n_function_calls[i] == 0 && Metadata[function_names[i]].is_private
            uncalled += function_names[i]
        endif
    endloop

    return uncalled
end function


function matrix summarize_graph (const matrix graph,
                                 const strings function_names)
    /* Vector with n rows where each row refers to a function. The respective value refers to the number of calls if this specific function is called by other functions. Helps to detect unused functions. */

    assert(nelem(function_names) == rows(graph))

    matrix m = sumr(graph)
    rnameset(m, function_names)
    cnameset(m, defarray("# of calls"))

    return m
end function

function matrix compile_dependency_graph (const bundle Metadata)
    /* Compile a matrix of calls of a function (row) by some other function
    (cols). Complexity level is quadratic. */

    matrix graph = zeros(nelem(Metadata), nelem(Metadata))

    loop foreach i Metadata
        string function_searched = sprintf("%s(", "$i")

        loop foreach j Metadata
            if ("$i" != "$j") && instring(Metadata["$j"].code, "$i")
                graph[i,j] = TRUE
            endif
        endloop
    endloop

    rnameset(graph, getkeys(Metadata))
    cnameset(graph, getkeys(Metadata))

    return graph
end function


function void print_pkgsummary (const bundle self "Bundle returned by get_pkgdata()")
    /* Print summary of functions. */

    strings function_names = getkeys(self)

    printf "\n============================================================\n"
    printf "\t\t%s\n\n", "Summary package function overview"
    printf "%-31s %5s %5s %12s\n", "Function name", "# Params.",\
        "Private", "Lines of Code"
    printf "-------------------------------------------------------------\n"

    loop foreach i function_names
        print_function_details(self["$i"], "$i", self["$i"].is_private)
    endloop
    printf "============================================================\n"
end function


function void print_function_details (const bundle Function,
                                      const string function_name,
                                      const bool is_private)
    scalar n_lines = nelem(strsplit(Function.code, "\n")) # delimiter in xml
    scalar n_input = nelem(Function.parameter_names)

    printf "%-31s %5d %8d %8d\n", function_name, n_input, is_private, n_lines
end function


function void Info (const string s)
    printf "\nInfo: %s\n", s
end function

function void Warning (const string s)
    printf "\nWarning: %s\n", s
end function

function void Error (const string s)
    printf "\nError: %s\n", s
end function
